# Setup PostgreSQL databases
---

- block:
    - name: Flush PostgreSQL databases
      postgresql_db:
        name: '{{ item.value.name }}'
        login_host: '{{ item.value.host|default(omit) }}'
        login_user: '{{ item.value.login_user|default(omit) }}'
        login_password: '{{ item.value.login_password|default(omit) }}'
        port: '{{ item.value.port|default(omit) }}'
        state: absent
      loop_control:
        label: '{{ item.value.name }}'
      tags: flush
      when: item.value.flush|default(false)|bool and not 'template' in item.value.name
      with_dict: '{{ postgresql_databases }}'

    - name: Setup PostgreSQL databases
      postgresql_db:
        name: '{{ item.value.name }}'
        encoding: "{{ item.value.encoding|default('unicode') }}"
        template: "{{ item.value.template|default('template1') }}"
        login_host: '{{ item.value.host|default(omit) }}'
        login_user: '{{ item.value.login_user|default(omit) }}'
        login_password: '{{ item.value.login_password|default(omit) }}'
        port: '{{ item.value.port|default(omit) }}'
        state: present
      loop_control:
        label: '{{ item.value.name }}'
      tags: flush-extra
      when: not 'template' in item.value.name
      with_dict: '{{ postgresql_databases }}'

    - name: Setup PostgreSQL users (deprecation error)
      fail:
        msg: 'Please define user {{ item.value.user }} with the new method.'
      loop_control:
        label: '{{ item.value.name }}'
      tags: flush-extra
      when: not 'template' in item.value.name and item.value.user is defined
      with_dict: '{{ postgresql_databases }}'

    - name: Setup PostgreSQL users
      postgresql_user:
        name: '{{ item.1.name }}'
        db: '{{ item.0.value.name }}'
        encrypted: '{{ item.1.password_encrypted|default(omit) }}'
        password: '{{ item.1.password }}'
        login_host: '{{ item.0.value.host|default(omit) }}'
        login_user: '{{ item.0.value.login_user|default(omit) }}'
        login_password: '{{ item.0.value.login_password|default(omit) }}'
        no_password_changes: '{{ not item.1.password_update|default(true) }}'
        port: '{{ item.0.value.port|default(omit) }}'
        role_attr_flags: "{{ item.1.role_flags|join(',') }}"
        state: present
      loop: "{{ postgresql_databases|dict2items|subelements('value.users', skip_missing=true) }}"
      loop_control:
        label: 'db->{{ item.0.value.name }} user->{{ item.1.name }}'
      tags: flush-extra
      when: not 'template' in item.0.value.name

    - name: Enable extensions to the PostgreSQL databases
      postgresql_ext:
        name: '{{ item.1 }}'
        db: '{{ item.0.name }}'
        login_host: '{{ item.0.host|default(omit) }}'
        login_user: '{{ item.0.login_user|default(omit) }}'
        login_password: '{{ item.0.login_password|default(omit) }}'
        port: '{{ item.0.port|default(omit) }}'
        state: present
      loop: "{{ postgresql_databases.values()|selectattr('extensions', 'defined')|list|subelements('extensions') }}"
      loop_control:
        label: '{{ item.0.name }} extension {{ item.1 }}'
      tags: flush-extra

    - name: Allow PostgreSQL users to access PostgreSQL databases
      postgresql_privs:
        db: '{{ item.0.value.name }}'
        login_host: '{{ item.0.value.host|default(omit) }}'
        login_user: '{{ item.0.value.login_user|default(omit) }}'
        login_password: '{{ item.0.value.login_password|default(omit) }}'
        port: '{{ item.0.value.port|default(omit) }}'
        priv: ALL
        role: '{{ item.1.name }}'
        state: present
        type: database
      loop: "{{ postgresql_databases|dict2items|subelements('value.users', skip_missing=true) }}"
      loop_control:
        label: 'db->{{ item.0.value.name }} user->{{ item.1.name }}'
      tags: flush-extra
      when: not 'template' in item.0.value.name
  run_once: yes
  tags: [postgresql-databases, databases]
