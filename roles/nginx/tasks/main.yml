# Install and configure Nginx, daemonize with Supervisor, enable our Site
# https://blog.engineyard.com/2011/useful-rewrites-for-nginx
---

- assert:
    that:
      - nginx_daemon_mode in nginx_daemon_modes
      - nginx_sites is defined
      - nginx_version is defined
  tags: [nginx, always]

- block:
    - name: Install Nginx build dependencies
      apt: >
        name=nginx state=build-dep
      changed_when: _nginx_build_dep.stdout_lines|length > 4
      register: _nginx_build_dep
      when: "ansible_pkg_mgr == 'apt'"

    - name: Install Nginx build packages
      package: >
        name={{ item }} state=present
      loop: '{{ nginx_build_packages }}'

    - name: Install Nginx extra packages
      package: >
        name={{ item }} state=present
      loop: '{{ nginx_extra_packages }}'
  become: yes
  tags: [nginx, packages]

- block:
    - name: Create Nginx daemon group
      group: >
        name={{ nginx_daemon_group }} system=yes state=present

    - name: Create Nginx daemon user
      user: >
        name={{ nginx_daemon_user }} group={{ nginx_daemon_group }} createhome=no system=yes state=present
  become: yes
  tags: [nginx, config]

- include_tasks: pagespeed.yml
  when: nginx_pagespeed_module_enabled|bool

- block:
    - name: Clone Nginx source code
      git: >
        repo=https://github.com/nginx/nginx.git
        dest={{ local_source_directory }}/nginx force=yes
        version={{ nginx_version }}
      register: _nginx_git

    - name: Clone Length Hiding Filter module source code
      git: >
        repo=https://github.com/nulab/nginx-length-hiding-filter-module.git
        dest={{ local_source_directory }}/nginx-length-hiding-filter-module force=yes
        version={{ nginx_length_hiding_filter_module_version }}
      register: _nginx_length_hiding_filter_module_git
      when: nginx_length_hiding_filter_module_enabled|bool

    - block:
        - name: Clone Upload module source code
          git: >
            repo=https://github.com/vkholodkov/nginx-upload-module.git
            dest={{ local_source_directory }}/nginx-upload-module force=yes
            version={{ nginx_upload_module_version }}
          register: _nginx_upload_module_git

        - name: Clone Upload Progress module source code
          git: >
            repo=https://github.com/masterzen/nginx-upload-progress-module.git
            dest={{ local_source_directory }}/nginx-upload-progress-module force=yes
            version={{ nginx_upload_progress_module_version }}
          register: _nginx_upload_progress_module_git
      when: nginx_upload_module_enabled|bool

    - name: Clone Zip module source code
      git: >
        repo=https://github.com/evanmiller/mod_zip.git
        dest={{ local_source_directory }}/nginx-zip-module force=yes
        version={{ nginx_zip_module_version }}
      register: _nginx_zip_module_git
      when: nginx_zip_module_enabled|bool

    - name: Set Nginx build configuration
      set_fact:
        nginx_build_cfg: >
          --prefix=/usr/share/nginx
          --conf-path=/etc/nginx/nginx.conf
          --http-log-path=/var/log/nginx/access.log
          --error-log-path=/var/log/nginx/error.log
          --lock-path=/var/lock/nginx.lock
          --pid-path=/run/nginx.pid
          --http-client-body-temp-path=/var/lib/nginx/body
          --http-fastcgi-temp-path=/var/lib/nginx/fastcgi
          --http-proxy-temp-path=/var/lib/nginx/proxy
          --http-scgi-temp-path=/var/lib/nginx/scgi
          --http-uwsgi-temp-path=/var/lib/nginx/uwsgi
          {{ nginx_build_flags|join(' ') }}
          {% if nginx_length_hiding_filter_module_enabled %}
          --add-module={{ local_source_directory }}/nginx-length-hiding-filter-module
          {% endif %}
          {% if nginx_upload_module_enabled %}
          --add-module={{ local_source_directory }}/nginx-upload-module
          --add-module={{ local_source_directory }}/nginx-upload-progress-module
          {% endif %}
          {% if nginx_zip_module_enabled %}
          --add-module={{ local_source_directory }}/nginx-zip-module
          {% endif %}
          {{ nginx_pagespeed_module_configure }}

    - name: Set Nginx build environment
      set_fact:
        nginx_build_env: >
          {{ nginx_build_cfg }}
          {{ _nginx_git.after }}
          {{ nginx_server_header_engine }}
          {{ _nginx_length_hiding_filter_module_git.after|default('') }}
          {{ _nginx_upload_module_git.after|default('') }}
          {{ _nginx_upload_progress_module_git.after|default('') }}
          {{ _nginx_zip_module_git.after|default('') }}

    - name: Detect if Nginx must be reinstalled
      command: >
        cat '{{ local_source_directory }}/nginx.build.cfg'
      changed_when: >
        nginx_build_env|trim != nginx_build.stdout|default('')|trim
      check_mode: no
      failed_when: no
      register: nginx_build

    - block:
        - name: Set Nginx Server header engine
          replace: >
            dest={{ local_source_directory }}/nginx/src/http/ngx_http_header_filter_module.c
            replace='{{ item }}[] = "Server: {{ nginx_server_header_engine }}" CRLF;'
            regexp='{{ item }}\[\] = "Server: [^;]+;$'
          loop:
            - ngx_http_server_string
            - ngx_http_server_full_string
            - ngx_http_server_build_string

        - name: Configure Nginx build process
          command: >
            ./auto/configure {{ nginx_build_cfg }}
          args:
            chdir: '{{ local_source_directory }}/nginx'

        - name: Build Nginx from source
          make:
            chdir: '{{ local_source_directory }}/nginx'
            params:
              '--jobs': '{{ ansible_processor_cores }}'

        - name: Install Nginx from source
          make:
            chdir: '{{ local_source_directory }}/nginx'
            target: install

        - name: Make Nginx binary executable
          file: >
            name={{ nginx_daemon_path }} mode=755 state=file

        - name: Save build environment
          copy: >
            content={{ nginx_build_env }} dest={{ local_source_directory }}/nginx.build.cfg

        - name: Trigger Nginx restart
          command: >
            ls /dev/null
          changed_when: yes
          check_mode: no
          notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} restart nginx'
      when: nginx_build is change
  become: yes
  tags: [nginx, packages]

- block:
    - name: Create Nginx directories
      file: >
        name={{ item.name }} owner={{ item.owner|default(omit) }} group={{ item.group|default(omit) }} mode=755
        state=directory
      loop:
        - { name: '/etc/nginx/conf.d'        }
        - { name: '/etc/nginx/sites-auth'    }
        - { name: '/etc/nginx/sites-dhparam' }
        - { name: '/etc/nginx/sites-enabled' }
        - { name: '/etc/nginx/sites-ssl'     }
        - { name: '/var/lib/nginx'           }
        - { name: '/var/log/nginx', owner: '{{ nginx_daemon_user }}', group: '{{ nginx_daemon_group }}' }

    - name: Configure Nginx
      template: >
        src={{ item.src }} dest=/etc/nginx/{{ item.dest }} mode=644
      loop:
        - { src: '{{ nginx_config_file }}',          dest: 'nginx.conf'           }
        - { src: '{{ nginx_security_config_file }}', dest: 'conf.d/security.conf' }
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'

    - name: Remove default site
      file: >
        path=/etc/nginx/sites-enabled/default state=absent
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'

    - include_tasks: 'setup-service-{{ nginx_daemon_mode }}.yml'
  become: yes
  tags: [nginx, config]

- block:
    - name: Start Nginx service
      supervisorctl: >
        name=nginx state=started
      ignore_errors: yes
      register: _nginx_start

    - name: Restart Nginx service
      supervisorctl: >
        name=nginx state=restarted
      when: _nginx_start is failure
  become: yes
  tags: [nginx, services]
  when: "nginx_daemon_mode == 'supervisor'"

- name: Start Nginx service
  service: >
    name=nginx state=started enabled=yes
  become: yes
  tags: [nginx, services]
  when: "nginx_daemon_mode != 'supervisor'"

- name: Trigger Nginx reload
  command: >
    ls /dev/null
  changed_when: yes
  check_mode: no
  notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
  tags: [nginx, update]
  when: nginx_reload_on_update|bool

- block:
    - name: Setup the Nginx sites
      template: >
        src={{ item.value.config_file }} dest=/etc/nginx/sites-enabled/{{ item.value.name }}.conf mode=644
      loop_control:
        label: '{{ item.value.name }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      with_dict: '{{ nginx_sites }}'

    - name: Setup the Nginx sites basic authentication
      template: >
        src={{ item.value.auth_file }} dest=/etc/nginx/sites-auth/{{ item.value.name }}.conf mode=644
      loop_control:
        label: '{{ item.value.name }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      when: item.value.auth_file|default('')|length > 0
      with_dict: '{{ nginx_sites }}'

    - name: Setup the Nginx sites certificates
      copy: >
        src={{ item.0.ssl_files_prefix }}.{{ item.1 }} dest=/etc/nginx/sites-ssl/{{ item.0.name }}.{{ item.1 }}
        owner={{ nginx_daemon_user }} group={{ nginx_daemon_group }} mode=444
      loop: "{{ lookup('nested', nginx_sites.values(), ['crt', 'key']) }}"
      loop_control:
        label: '{{ item.0.name }} {{ item.1 }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      when: item.0.ssl_files_prefix|default('')|length > 0

    - name: Setup the Nginx sites Diffie-Hellman parameters
      command: >
        openssl dhparam -out /etc/nginx/sites-dhparam/{{ item.value.name }}.pem 2048
      args:
        creates: /etc/nginx/sites-dhparam/{{ item.value.name }}.pem
      loop_control:
        label: '{{ item.value.name }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      when: item.value.with_dhparam|default(true)|bool
      with_dict: '{{ nginx_sites }}'

    - name: Create the Nginx sites logs directory
      file: >
        name=/var/log/nginx/{{ item.value.name }} owner={{ nginx_daemon_user }} group={{ nginx_daemon_group }} mode=755
        recurse=yes state=directory
      loop_control:
        label: '{{ item.value.name }}'
      with_dict: '{{ nginx_sites }}'

    - name: Check Nginx config
      command: >
        {{ nginx_daemon_path }} -t
      changed_when: no
      check_mode: no
  become: yes
  tags: [nginx, sites]
