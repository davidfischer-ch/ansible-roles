---

- block:
    - name: Create Application directories
      file:
        name: '{{ item.name }}'
        mode: '{{ item.mode }}'
        state: directory
      loop:
        - { name: '{{ jsapp_directory }}',      mode: 750 }
        - { name: '{{ jsapp_directory }}/.ssh', mode: 700 }
      loop_control:
        label: '{{ item.name }}'

    - block:
        - name: Install Application repository SSH key pair
          copy:
            src: '{{ item.path }}'
            dest: '{{ jsapp_directory }}/.ssh/{{ item.name }}'
            mode: 0600
          diff: not item.hidden|bool
          loop:
            - { path: '{{ jsapp_ssh_key_private }}', name: id_rsa,     hidden: yes }
            - { path: '{{ jsapp_ssh_key_public }}',  name: id_rsa.pub, hidden: no  }
          loop_control:
            label: '{{ item.name }}'
          no_log: item.hidden|bool

        - name: Register Application repository RSA key
          known_hosts:
            name: '{{ jsapp_repository_host }}'
            key: '{{ jsapp_repository_key }}'
            state: present
      when: not jsapp_repository_is_local|bool
  tags: config

- block:
    - name: Clone Application source code
      git:
        repo: '{{ jsapp_repository_url }}'
        dest: '{{ jsapp_directory }}/source'
        force: yes
        key_file: '{{ jsapp_directory }}/.ssh/id_rsa'
        version: '{{ jsapp_version }}'
      when: not jsapp_repository_is_local|bool
      # FIXME Temporary hack to fix issue with git module
      delay: 1
      register: _jsapp_git
      retries: 3
      until: _jsapp_git is success

    - name: Copy Application source code
      synchronize:
        src: '{{ jsapp_repository_url }}/'
        dest: '{{ jsapp_directory }}/source/'
        archive: yes
        checksum: yes
        delete: yes
      when: jsapp_repository_is_local|bool

    - import_tasks: read-config.yml

    - name: Deploy Application source code
      command: >
        rsync {{ jsapp_directory }}/source/ {{ jsapp_directory }}/build/
         {{ ansible_check_mode|ternary('--dry-run --exclude=/dist --exclude=/node_modules --exclude=/package-lock.json', '') }}
        --archive --checksum --delete --hard-links --links --progress
      check_mode: no
      changed_when: _jsapp_rsync.stdout_lines|length > 2
      register: _jsapp_rsync

    - debug:
        var: _jsapp_rsync
      when: ansible_check_mode

    - block:
        - name: Create Python virtualenv
          command: >
            virtualenv -p python{{ jsapp_python_version }} --no-site-packages
            {{ jsapp_directory }}/python_venv
          args:
            creates: '{{ jsapp_directory }}/python_venv'

        # FIXME detect unchanged state
        - name: Install Application Python packages
          command: >
            {{ jsapp_directory }}/python_venv/bin/pip install {{ item }}
          loop: '{{ jsapp_python_packages }}'

        - name: Detect Node virtualenv version
          command: >
            {{ jsapp_directory }}/node_venv/bin/{{ item }} --version
          changed_when: >
            _jsapp_venv_version.stdout|default('')|regex_replace('v', '') !=
            hostvars[inventory_hostname]['jsapp_config'][item+'_version']
          environment: '{{ jsapp_node_environment }}'
          failed_when: >
            _jsapp_venv_version is failure and
            'Errno 2' not in _jsapp_venv_version.msg
          loop:
            - node
            - npm
          register: _jsapp_venv_version

        - name: Flush Node virtualenv
          file: >
            name={{ jsapp_directory }}/node_venv state=absent
          when: _jsapp_venv_version is change

        - name: Create Node virtualenv
          command: >
            {{ jsapp_directory }}/python_venv/bin/nodeenv
              --node={{ jsapp_config.node_version }}
              --npm={{ jsapp_config.npm_version }}
              --prebuilt
              {{ jsapp_directory }}/node_venv
          args:
            creates: '{{ jsapp_directory }}/node_venv'
      tags: virtualenv

    - name: Install Application requirements
      command: >
        {{ jsapp_directory }}/node_venv/bin/npm install
      args:
        chdir: '{{ jsapp_directory }}/build/{{ jsapp_config.source_path }}'
      environment: '{{ jsapp_node_environment }}'

    - name: Trigger before-build hook
      import_tasks: "{{ jsapp_before_build_tasks_file or 'none.yml' }}"

    - name: Build Application
      command: >
        npm run build
      args:
        chdir: '{{ jsapp_directory }}/build/{{ jsapp_config.source_path }}'
      environment: '{{ jsapp_node_environment }}'
      register: _jsapp_build

    - debug:
        var: _jsapp_build.stdout_lines

    - name: Copy Application templates locally
      fetch:
        src: '{{ jsapp_directory }}/build/{{ item }}.j2'
        dest: /tmp/
        fail_on_missing: yes
      loop: '{{ jsapp_config.templates }}'
      register: _jsapp_templates

    - name: Process the Application templates
      template:
        src: '{{ item.dest }}'
        dest: '{{ jsapp_directory }}/build/{{ item.item }}'
      loop: '{{ _jsapp_templates.results }}'
      loop_control:
        label: '{{ item.item }}'

    - import_tasks: upload.yml
      tags: upload
  tags: update
