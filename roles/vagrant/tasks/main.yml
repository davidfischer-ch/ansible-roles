---

- name: Install Vagrant packages
  package: >
    name={{ item }} state=present
  become: yes
  tags: [vagrant, packages]
  with_items: '{{ vagrant_packages }}'

- block:
    - name: Generate Vagrant file
      template: >
        src=Vagrantfile.j2 dest=/tmp/Vagrantfile mode=644

    - name: Save machines specifications into a file
      copy: >
        dest=/tmp/vagrant_machines.yml content='{{ vagrant_machines|to_yaml }}'

    - name: Detect machines IDs
      script: >
        set-machines-ids /tmp/vagrant_machines.yml
      changed_when: no
      register: vagrant_ids_result

    - name: Update machines specifications
      set_fact:
        vagrant_machines: '{{ vagrant_ids_result.stdout|from_json }}'

    - name: Create machines metadata directories
      file: >
        name=/tmp/.vagrant/machines/{{ item.key }}/{{ item.value.provider }} state=directory
      with_dict: '{{ vagrant_machines }}'

    - name: Update machines IDs file
      copy: >
        dest=/tmp/.vagrant/machines/{{ item.key }}/{{ item.value.provider }}/id content={{ item.value.uuid }} force=yes
      with_dict: '{{ vagrant_machines }}'

    - name: Check boxes are up-to-date
      command: >
        vagrant box outdated
      args:
        chdir: /tmp
      always_run: yes
      changed_when: "vagrant_update_boxes|bool and 'to update' in vagrant_outdated_result.stdout"
      register: vagrant_outdated_result

    - name: Update boxes
      command: >
        vagrant box update
      args:
        chdir: /tmp
      when: vagrant_outdated_result|changed

    - name: Provision machines
      command: >
        vagrant up --provider {{ item.value.provider }} {{ item.key }}
      args:
        chdir: /tmp
      changed_when: "'already running' not in vagrant_up_result.stdout"
      register: vagrant_up_result
      with_dict: '{{ vagrant_machines }}'
  tags: [vagrant, provision]

- block:
    - name: Get installed Vagrant plugins
      command: >
        vagrant plugin list
      changed_when: no
      register: vagrant_plugin_result

    - name: Install Vagrant plugins
      command: >
        vagrant plugin install vagrant-{{ item }}
      with_items: '{{ vagrant_plugins }}'
      when: item not in vagrant_plugin_result.stdout
  tags: [vagrant, packages]

- block:
    - name: Get VMs snapshot list
      command: >
        vagrant snapshot list {{ item.key }}
      args:
        chdir: /tmp
      changed_when: no
      register: vagrant_snapshot_list
      with_dict: '{{ vagrant_snapshots }}'

    - name: Take base VMs snapshot
      command: >
        vagrant snapshot take {{ item.item.key }} {{ item.item.value }}
      args:
        chdir: /tmp
      when: "' {{ item.item.value }} ' not in item.stdout"
      with_items: '{{ vagrant_snapshot_list.results|default([]) }}'
  tags: [vagrant, snapshots]
