# Install and configure Apache 2
---

- assert:
    that:
      apache_log_level in apache_log_levels
  tags: [apache, always]

- name: Install Apache packages
  package: >
    name={{ item }} state=present
  become: yes
  tags: [apache, packages]
  with_items: '{{ apache_packages }}'

- include: pagespeed.yml
  tags: [apache, packages]
  when: apache_pagespeed_module_enabled|bool

- include: get-version.yml
  tags: [apache, always]

- block:
    - name: Create Apache directories
      file: >
        name={{ item.name }} owner={{ item.owner|default(omit) }} group={{ item.group|default(omit) }} mode=755
        state=directory
      with_items:
        - { name: '/etc/apache2/sites-auth/'    }
        - { name: '/etc/apache2/sites-dhparam/' }
        - { name: '/etc/apache2/sites-ssl/'     }

    - name: Configure Apache
      template: >
        src={{ apache_config_file }} dest=/etc/apache2/apache2.conf mode=600
      notify: reload apache

    - name: Setup Apache extra configuration
      template: >
        src={{ item.value.config_file }} dest=/etc/apache2/conf.d/{{ item.value.name }}.conf mode=644
      notify: reload apache
      with_dict: '{{ apache_extra_config_files }}'

    - name: Configure Apache ports
      template: >
        src={{ apache_ports_file }} dest=/etc/apache2/ports.conf mode=600
      notify: restart apache
      when: apache_ports_file|length > 0

    - name: Configure Apache macros
      template: >
        src={{ apache_macros_file }} dest=/etc/apache2/mods-available/macro.conf mode=644
      notify: reload apache
      when: apache_macros_file|length > 0

    - name: Enable Apache modules
      apache2_module: >
        name={{ item }} state=present
      notify: restart apache
      with_items: '{{ apache_modules }}'
  become: yes
  tags: [apache, config]

- name: Start Apache service
  service: >
    name=apache2 state=started enabled=yes
  become: yes
  tags: [apache, services]

- block:
    - name: Setup the Apache sites basic authentication
      template: >
        src={{ item.value.auth_file }} dest=/etc/apache2/sites-auth/{{ item.value.name }}.conf mode=644
      loop_control:
        label: '{{ item.value.name }}'
      notify: reload apache
      when: item.value.auth_file is defined and item.value.auth_file
      with_dict: '{{ apache_sites }}'

    - name: Setup the Apache sites certificates
      copy: >
        src={{ item.0.ssl_files_prefix }}.{{ item.1 }} dest=/etc/apache2/sites-ssl/{{ item.0.name }}.{{ item.1 }}
        owner={{ apache_daemon_user }} group={{ apache_daemon_group }} mode=444
      loop_control:
        label: '{{ item.0.name }} {{ item.1 }}'
      notify: reload apache
      when: item.0.ssl_files_prefix is defined and item.0.ssl_files_prefix
      with_nested:
        - '{{ apache_sites.values() }}'
        - [crt, key]

    - name: Setup the Apache sites Diffie-Hellman parameters
      command: >
        openssl dhparam -out /etc/apache2/sites-dhparam/{{ item.value.name }}.pem 2048
      args:
        creates: /etc/apache2/sites-dhparam/{{ item.value.name }}.pem
      loop_control:
        label: '{{ item.value.name }}'
      notify: reload apache
      when: item.value.with_dhparam|default(true)|bool
      with_dict: '{{ apache_sites }}'

    - name: Create the Apache sites logs directory
      file: >
        name=/var/log/apache2/{{ item.value.name }} owner={{ apache_daemon_user }} group={{ apache_daemon_group }} mode=755
        recurse=yes state=directory
      loop_control:
        label: '{{ item.value.name }}'
      with_dict: '{{ apache_sites }}'

    - name: Setup the Apache sites
      template: >
        src={{ item.value.config_file }} dest=/etc/apache2/sites-available/{{ item.value.name }}.conf mode=644
      loop_control:
        label: '{{ item.value.name }}'
      notify: reload apache
      with_dict: '{{ apache_sites }}'

    - name: Enable the Apache sites
      file: >
        src=/etc/apache2/sites-available/{{ item.value.name }}.conf
        dest=/etc/apache2/sites-enabled/{{ item.value.name }}.conf state=link
      loop_control:
        label: '{{ item.value.name }}'
      notify: reload apache
      with_dict: '{{ apache_sites }}'

    - name: Disable unwanted sites
      file: >
        name=/etc/apache2/sites-enabled/{{ item }}.conf state=absent
      notify: reload apache
      with_items: '{{ apache_disabled_sites }}'
  become: yes
  tags: [apache, sites]
