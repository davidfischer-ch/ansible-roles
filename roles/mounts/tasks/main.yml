# Install file-systems packages & configure mount points
---

- dynamic_defaults:
    hostvars: '{{ hostvars[inventory_hostname] }}'
    defaults: '{{ mounts_dynamic_defaults }}'
    must_match: yes
  tags: [mounts, always]

- name: Install file-system packages
  package: >
    name={{ mounts_packages_by_fstype[item] }} state=present
  loop_control:
    label: "{{ item }} -> {{ mounts_packages_by_fstype[item]|default('missing') }}"
  when: item in mounts_packages_by_fstype or not mounts_packages_by_fstype_skip_missing|bool
  with_items: "{{ mounts_filesystem_types|union(mounts.values()|map(attribute='fstype')|list)|unique|sort }}"
  become: yes
  tags: [mounts, packages]

- block:
    - name: Create file system
      filesystem: >
        dev={{ item.value.source }}
        fstype={{ item.value.fstype }}
        opts={{ item.value.create_options|default(omit) }}
        resizefs={{ item.value.resize|default(false)|bool }}
      loop_control:
        label: '{{ item.value.source }} type {{ item.value.fstype }} -> {{ item.value.directory }}'
      when: item.value.source|length > 0 and item.value.fstype != 'swap' and item.value.create|default(false)|bool
      with_dict: '{{ mounts }}'

    - name: Create mount directories
      file: >
        name={{ item.value.directory }}
        owner={{ item.value.user|default(user) }}
        group={{ item.value.group|default(group) }}
        mode={{ item.value.mode|default(755) }}
        state=directory
      loop_control:
        label: '{{ item.value.source }} type {{ item.value.fstype }} -> {{ item.value.directory }}'
      when: "item.value.fstype != 'swap'"
      with_dict: '{{ mounts }}'

    - name: Unmount the target directories
      mount: >
        fstype={{ item.value.fstype }}
        name={{ item.value.directory }}
        opts={{ item.value.options }}
        src={{ item.value.source }}
        state={{ (item.value.fstype == 'swap')|ternary('absent', 'unmounted') }}
      loop_control:
        label: '{{ item.value.source }} type {{ item.value.fstype }} -> {{ item.value.directory }}'
      when: item.value.source|length == 0 or 'bind' in item.value.options.split(',')
      with_dict: '{{ mounts }}'

    - name: Mount the target directories
      mount: >
        fstype={{ item.value.fstype }}
        name={{ item.value.directory }}
        opts={{ item.value.options }}
        src={{ item.value.source }}
        state={{ (item.value.fstype == 'swap')|ternary('present', 'mounted') }}
      loop_control:
        label: '{{ item.value.source }} type {{ item.value.fstype }} -> {{ item.value.directory }}'
      when: item.value.source|length > 0
      with_dict: '{{ mounts }}'

    - name: Check root can write and chown
      file: >
        name={{ item.value.directory }}/{{ inventory_hostname }} owner={{ user }} group={{ group }} mode=755 state=directory
      loop_control:
        label: '{{ item.value.source }} type {{ item.value.fstype }} -> {{ item.value.directory }}'
      when: item.value.check|bool and item.value.fstype != 'swap'
      with_dict: '{{ mounts }}'

    - name: Check user can write
      file: >
        name={{ item.value.directory }}/{{ inventory_hostname }}/{{ user }} state=directory
      become: no
      loop_control:
        label: '{{ item.value.source }} type {{ item.value.fstype }} -> {{ item.value.directory }}'
      when: item.value.check|bool and item.value.fstype != 'swap'
      with_dict: '{{ mounts }}'

    - name: Check required NFS service is reachable
      command: >
        rpcinfo -u {{ item.value.source|regex_replace(':[^:]+$', '') }} status
      changed_when: no
      check_mode: no
      failed_when: "'ready and waiting' not in _mounts_rpcinfo.stdout"
      loop_control:
        label: '{{ item.value.source }} type {{ item.value.fstype }} -> {{ item.value.directory }}'
      register: _mounts_rpcinfo
      run_once: yes
      when: item.value.check|bool and item.value.fstype == 'nfs'
      with_dict: '{{ mounts }}'

    - name: Final cleanup
      file: >
        name={{ item.value.directory }}/{{ inventory_hostname }} state=absent
      loop_control:
        label: '{{ item.value.source }} type {{ item.value.fstype }} -> {{ item.value.directory }}'
      when: item.value.check|bool and item.value.fstype != 'swap'
      with_dict: '{{ mounts }}'
  become: yes
  tags: [mounts, shares]
