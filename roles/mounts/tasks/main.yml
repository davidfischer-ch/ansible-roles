# Install file-systems packages & configure mount points
---

- name: Install file-system packages
  package: >
    name={{ item }} state=present
  become: yes
  tags: [mounts, packages]
  with_items: '{{ filesystem_packages }}'

- block:
    - name: Create file system
      filesystem: >
        dev={{ item.value.source }}
        fstype={{ item.value.fstype }}
        opts={{ item.value.create_options|default(omit) }}
        resizefs={{ item.value.resize|default(false)|bool }}
      when: item.value.source|length > 0 and item.value.fstype != 'swap' and item.value.create|default(false)|bool
      with_dict: '{{ mounts }}'

    - name: Create mount directories
      file: >
        name={{ item.value.directory }}
        owner={{ item.value.user|default(user) }}
        group={{ item.value.group|default(group) }}
        mode=755
        state=directory
      when: "item.value.fstype != 'swap'"
      with_dict: '{{ mounts }}'

    - name: Mount the shared directories
      mount: >
        fstype={{ item.value.fstype }}
        name={{ item.value.directory }}
        opts='{{ item.value.options }}'
        src={{ item.value.source }}
        state={{ (item.value.fstype == 'swap')|ternary('present', 'mounted') }}
      when: item.value.source|length > 0
      with_dict: '{{ mounts }}'

    - name: Unmount the shared directories
      mount: >
        fstype={{ item.value.fstype }}
        name={{ item.value.directory }}
        opts='{{ item.value.options }}'
        src={{ item.value.source }}
        state={{ (item.value.fstype == 'swap')|ternary('absent', 'unmounted') }}
      when: item.value.source|length == 0
      with_dict: '{{ mounts }}'

    - name: Check root can write and chown
      file: >
        name={{ item.value.directory }}/{{ inventory_hostname }} owner={{ user }} group={{ group }} mode=755 state=directory
      when: item.value.check|bool and item.value.fstype != 'swap'
      with_dict: '{{ mounts }}'

    - name: Check user can write
      file: >
        name={{ item.value.directory }}/{{ inventory_hostname }}/{{ user }} state=directory
      become: no
      when: item.value.check|bool and item.value.fstype != 'swap'
      with_dict: '{{ mounts }}'

    - name: Check required NFS service is reachable
      command: >
        rpcinfo -u {{ item.value.source|split(':')[0] }} status
      always_run: yes
      changed_when: no
      failed_when: "'ready and waiting' not in _mounts_rpcinfo.stdout"
      register: _mounts_rpcinfo
      run_once: yes
      when: item.value.check|bool and item.value.fstype == 'nfs'
      with_dict: '{{ mounts }}'

    - name: Final cleanup
      file: >
        name={{ item.value.directory }}/{{ inventory_hostname }} state=absent
      when: item.value.check|bool and item.value.fstype != 'swap'
      with_dict: '{{ mounts }}'
  become: yes
  tags: [mounts, shares]
