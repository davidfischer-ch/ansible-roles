---

- block:
    - name: Flush PostgreSQL databases
      postgresql_db: >
        name={{ item.value.name }} state=absent
      loop_control:
        label: '{{ item.value.name }}'
      tags: flush
      when: item.value.flush|default(false)|bool and not 'template' in item.value.name
      with_dict: '{{ postgresql_databases }}'

    - name: Setup PostgreSQL users
      postgresql_user: >
        name={{ item.value.user }} password={{ item.value.password }} state=present
        role_attr_flags={{ item.value.role_flags|default(['SUPERUSER', 'CREATEDB'])|join(',') }}
      loop_control:
        label: '{{ item.value.name }}'
      tags: flush_extra
      when: not 'template' in item.value.name
      with_dict: '{{ postgresql_databases }}'

    - name: Setup PostgreSQL databases
      postgresql_db: >
        name={{ item.value.name }} encoding={{ item.value.encoding|default('unicode') }} owner={{ item.value.user }}
        template={{ item.value.template|default('template1') }} state=present
      loop_control:
        label: '{{ item.value.name }}'
      tags: flush_extra
      when: not 'template' in item.value.name
      with_dict: '{{ postgresql_databases }}'
  become: yes
  become_user: postgres

- block:
    - name: Install PostGIS packages
      package: >
        name={{ item }} state=present
      with_items:
        - postgis
        - 'postgresql-{{ postgresql_version }}-postgis-2.1'
        - 'postgresql-{{ postgresql_version }}-postgis-2.1-scripts'

    - name: Install geolocation prerequisites required for all back-ends
      package: >
        name={{ item }} state=present
      with_items:
        - binutils
        - libgeos-3.4.2
        - libgeos-c1
        - libgeos-dev

    - name: Install geolocation prerequisites required for PostgreSQL and SQLite
      package: >
        name={{ item }} state=present
      with_items:
        - libproj-dev
        - proj-bin
        - proj-data

    - name: Install geolocation prerequisites optional but required for SQLite
      package: >
        name={{ item }} state=present
      with_items:
        - gdal-bin
        - libgdal1-dev
        - python3-gdal

    - name: install optional IP-based geolocation library
      package: >
        name={{ item }} state=present
      with_items:
        - libgeoip1
  become: yes
  tags: packages
  when: "'postgis' in postgresql_databases.values()|selectattr('extensions', 'defined')|map(attribute='extensions')|join()"

- block:
    - name: Enable extensions to the PostgreSQL databases
      postgresql_ext: >
        db={{ item.0.name }} name={{ item.1 }} state=present
      loop_control:
        label: '{{ item.0.name }}'
      tags: flush_extra
      with_subelements:
        - "{{ postgresql_databases.values()|selectattr('extensions', 'defined')|list }}"
        - extensions

    - name: Remove PostgreSQL unit-test databases
      postgresql_db: >
        name=test_{{ item.value.name }} state=absent
      loop_control:
        label: '{{ item.value.name }}'
      tags: unit_test
      when: item.value.with_test|default(false)|bool
      with_dict: '{{ postgresql_databases }}'

    - name: Allow PostgreSQL users to access PostgreSQL databases
      postgresql_privs: >
        db={{ item.value.name }} type=database priv=ALL role={{ item.value.user }} state=present
      loop_control:
        label: '{{ item.value.name }}'
      tags: flush_extra
      when: not 'template' in item.value.name
      with_dict: '{{ postgresql_databases }}'
  become: yes
  become_user: postgres
