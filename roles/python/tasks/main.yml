---

- dynamic_defaults:
    hostvars: '{{ hostvars[inventory_hostname] }}'
    defaults: '{{ python_dynamic_defaults }}'
    must_match: yes
  tags: [python, always]

- block:
    - name: Install Python packages
      package: >
        name={{ item }} state=present
      with_items: '{{ python_packages }}'

    - name: Detect missing Python versions
      command: >
        python{{ item }}
      changed_when: _python_command is failure
      check_mode: no
      failed_when: no
      register: _python_command
      with_items: '{{ python_versions }}'

    - set_fact:
        python_missing_versions: "{{ _python_command.results|selectattr('changed')|map(attribute='item')|list }}"

    - include: setup-from-source.yml
      loop_control:
        loop_var: _python_version
      with_items: '{{ python_missing_versions|default([]) }}'

    - name: Download pip bootstrap script
      get_url: >
        url=https://bootstrap.pypa.io{{ (item|string == '3.2')|ternary('/3.2', '') }}/get-pip.py
        dest={{ local_source_directory }}/get-pip-{{ item }}.py
      with_items: '{{ python_versions }}'

    - name: Install pip
      command: >
        python{{ item }} {{ local_source_directory }}/get-pip-{{ item }}.py {{ python_get_pip_options }} pip{{ python_pip_version }}
      changed_when: "'already up-to-date' not in _get_pip.stdout|default('') and 'are using pip' not in _get_pip.stderr|default('')"
      failed_when: "_get_pip is failure and 'are using pip' not in _get_pip.stderr|default('')"
      register: _get_pip
      with_items: '{{ python_versions }}'

    - name: Set pip default version
      file: >
        src={{ python_pip_path }}{{ python_default_version }} dest={{ python_pip_path }} force=yes state=link

    - name: Install setuptools
      pip: >
        name=setuptools executable=pip{{ item }} state={{ (python_setuptools_version == 'latest')|ternary('latest', omit) }}
        version={{ (python_setuptools_version == 'latest')|ternary(omit, python_setuptools_version) }}
      with_items: '{{ python_versions }}'

    - name: Install virtualenv
      pip: >
        name=virtualenv executable=pip{{ item }} state={{ (python_virtualenv_version == 'latest')|ternary('latest', omit) }}
        version={{ (python_virtualenv_version == 'latest')|ternary(omit, python_virtualenv_version) }}
      with_items: '{{ python_versions }}'
  become: yes
  tags: [python, packages]
