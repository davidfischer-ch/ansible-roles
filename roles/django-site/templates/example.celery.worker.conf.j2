; ===================================================================================
;  django application {{ djsite_instance_name }} celery {{ item.value.name }} worker
; ===================================================================================

[program:{{ djsite_instance_name }}-celery-{{ item.value.name }}]

environment=LANG={{ locale }},LC_ALL={{ locale }},LC_LANG={{ locale }}
{% if item.value.type == 'beat' %}
command = {{ djsite_app_directory }}/production/venv/bin/python manage.py celery beat --loglevel=INFO
{% else %}
command = {{ djsite_app_directory }}/production/venv/bin/python manage.py celery worker -Q {{ item.value.queues|join(',') }} --loglevel=INFO -n={{ item.value.name }}.{{ ansible_fqdn }}.{{ djsite_instance_name }} --statedb={{ djsite_app_directory }}/celery-{{ item.value.name }}.db
{% endif %}

directory      = {{ djsite_app_directory }}/production/server/
user           = {{ djsite_daemon_user }}
group          = {{ djsite_daemon_group }}
numprocs       = 1
stdout_logfile = {{ djsite_log_directory }}/celery-{{ item.value.name }}-stdout.log
stderr_logfile = {{ djsite_log_directory }}/celery-{{ item.value.name }}-stderr.log
autostart      = true
autorestart    = true
startsecs      = 10

; Need to wait for currently executing tasks to finish at shutdown. Increase this if you have very long running tasks.
stopwaitsecs = 6000

; When resorting to send SIGKILL to the program to terminate it send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup = true

; if rabbitmq is supervised, set its priority higher so it starts first.
priority = {{ 999 if item.value.type == 'beat' else 998 }}
