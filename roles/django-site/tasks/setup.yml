---

- name: Install Application packages
  package: >
    name={{ item }} state=present
  with_items: '{{ djsite_packages }}'
  become: yes
  tags: packages

- block:
    - name: Create Application directories
      file: >
        name={{ item.name }} owner={{ djsite_daemon_user }} group={{ djsite_daemon_group }} mode={{ item.mode }}
        state=directory
      with_items:
        - { name: '{{ djsite_app_directory }}',                                    mode: 755 }
        - { name: '{{ djsite_app_directory }}/.ssh',                               mode: 700 }
        - { name: '{{ djsite_app_directory }}/data',                               mode: 755 }
        - { name: '{{ djsite_app_directory }}/source',                             mode: 755 }
        - { name: '{{ djsite_app_directory }}/releases',                           mode: 755 }
        - { name: '{{ djsite_app_directory }}/test/server/bower/bower_components', mode: 755 }
        - { name: '{{ djsite_data_directory }}/media',                             mode: 755 }
        - { name: '{{ djsite_data_directory }}/releases',                          mode: 755 }
        - { name: '{{ djsite_log_directory }}',                                    mode: 750 }

    - name: Create link to Application media directory
      file: >
        src={{ djsite_data_directory }}/media dest={{ djsite_app_directory }}/test/server/media force=yes state=link

    - block:
        - name: Install Application repository SSH key pair
          copy: >
            src={{ item.path }} dest={{ djsite_app_directory }}/.ssh/{{ item.name }}
            owner={{ djsite_daemon_user }} group={{ djsite_daemon_group }} mode=0600
          loop_control:
            label: '{{ item.name }}'
          with_items:
            - { path: '{{ djsite_ssh_key_private }}', name: 'id_rsa'     }
            - { path: '{{ djsite_ssh_key_public }}',  name: 'id_rsa.pub' }

        - name: Register Application repository RSA key
          known_hosts: >
            name={{ djsite_repository_host }} key='{{ djsite_repository_key }}' state=present
          become_user: '{{ djsite_daemon_user }}'
      when: not djsite_repository_is_local|bool or djsite_has_private_requirements|bool
  become: yes
  tags: config

# Release

- block:
    - include: deploy-release.yml
    - include: make-migrations.yml
      tags: database
      when: djsite_repository_is_local|bool and djsite_update_database_migrations|bool

    - block:
        - name: Configure bower in non-interactive mode
          command: >
            {{ djsite_app_directory }}/test/venv/bin/python manage.py bower_install --traceback -- --config.interactive=false
          args:
            chdir: '{{ djsite_app_directory }}/test/server'
          tags: config

        - name: Download web (js) packages with bower
          command: >
            {{ djsite_app_directory }}/test/venv/bin/python ../manage.py bower_install --traceback -F
          args:
            chdir: '{{ djsite_app_directory }}/test/server'
          failed_when: "'error' in _djsite_install.stderr"
          register: _djsite_install
          tags: packages
      when: djsite_bower_enabled|bool

    - block:
        - name: Compile the assets (SASS/SCSS)
          django_manage: >
            command=compilescss
            app_path={{ djsite_app_directory }}/test/server
            virtualenv={{ djsite_app_directory }}/test/venv
          when: djsite_sass_enabled|bool

        - name: Collect the static files
          django_manage: >
            command=collectstatic
            app_path={{ djsite_app_directory }}/test/server
            virtualenv={{ djsite_app_directory }}/test/venv

        - name: Compress the assets (CSS/JS)
          django_manage: >
            command=compress
            app_path={{ djsite_app_directory }}/test/server
            virtualenv={{ djsite_app_directory }}/test/venv
          when: djsite_compress_enabled|bool and djsite_compress_offline|bool

        - name: Compile translations
          command: >
            {{ djsite_app_directory }}/test/venv/bin/python ../manage.py compilemessages
          args:
            chdir: '{{ djsite_app_directory }}/test/server/{{ item }}'
          with_items: '{{ djsite_config.custom_applications }}'
      tags: [unit-test-extra, update]

    - name: Check the applications for common errors
      command: >
        {{ djsite_app_directory }}/test/venv/bin/python manage.py check {{ djsite_config.custom_applications|join(' ')}}
      args:
        chdir: '{{ djsite_app_directory }}/test/server'
      tags: unit-test

    - block:
        - name: Reset the unit-tests coverage report
          command: >
            {{ djsite_app_directory }}/test/venv/bin/coverage erase
          args:
            chdir: '{{ djsite_app_directory }}/test/server'

        - name: Unit-test the application
          command: >
            {{ djsite_app_directory }}/test/venv/bin/coverage run {{ djsite_coverage_options|join(' ') }}
            manage.py test {{ djsite_config.custom_applications|join(' ') }} {{ djsite_test_options }}
          args:
            chdir: '{{ djsite_app_directory }}/test/server'

        - name: Generate the unit-tests coverage report
          command: >
            {{ djsite_app_directory }}/test/venv/bin/coverage html -d {{ djsite_app_directory }}/test/cover/
          args:
            chdir: '{{ djsite_app_directory }}/test/server'

        - name: Copy the unit-tests coverage report in the local machine
          synchronize: >
            src={{ djsite_app_directory }}/test/cover/
            dest={{ djsite_repository_url }}/{{ djsite_config.source_path }}/cover/
            archive=yes checksum=yes delete=yes mode=pull
          when: djsite_repository_is_local|bool

        - name: Retrieve unit-tests coverage
          shell: >
            {{ djsite_app_directory }}/test/venv/bin/coverage report | tail -n 1 | sed -r 's:.*\s+([0-9]+)%:\1:'
          args:
            chdir: '{{ djsite_app_directory }}/test/server'
          register: _djsite_coverage

        - debug: >
            msg='Coverage {{ _djsite_coverage.stdout }}% (min {{ djsite_coverage_minimum }}%)'

        - name: Ensure unit-tests coverage is sufficient
          fail: >
            msg='Unit-tests coverage of {{ _djsite_coverage.stdout }}% is under the minimum set at {{ djsite_coverage_minimum }}%'
          when: _djsite_coverage.stdout|int < djsite_coverage_minimum|int
      tags: unit-test

    - name: Migrate the database
      django_manage: >
        command=migrate
        app_path={{ djsite_app_directory }}/test/server
        virtualenv={{ djsite_app_directory }}/test/venv
      tags: [database, flush-extra]

    - name: Create the super-user
      shell: >
        echo "from django.contrib.auth.models import User; User.objects.create_superuser('{{ djsite_superuser.name }}', '{{ djsite_superuser.email }}', '{{ djsite_superuser.password }}')" | {{ djsite_app_directory }}/test/venv/bin/python ./manage.py shell
      args:
        chdir: '{{ djsite_app_directory }}/test/server'
      tags: [database, flush-extra]
  become: yes
  become_user: '{{ djsite_daemon_user }}'
  tags: update
  when: djsite_is_master|bool

# Release

- block:
    - include: 'release-{{ djsite_release_mode }}.yml'

    - block:
        - name: Archive Website directory into shared storage
          archive: >
            path={{ djsite_release_directory }}/
            dest={{ djsite_data_directory }}/releases/{{ djsite_release_timestamp }}.tar.gz
          when: djsite_is_master|bool

        - include: create-release-directory.yml
          when: not djsite_is_master|bool

        - name: Extract Website directory from shared storage
          unarchive:
            src={{ djsite_data_directory }}/releases/{{ djsite_release_timestamp }}.tar.gz
            dest={{ djsite_release_directory }}/ remote_src=yes
          when: not djsite_is_master|bool
      tags: sync
      when: not djsite_standalone|bool

    - block:
        - name: Switch production symlink
          file: >
            src={{ djsite_release_directory }} dest={{ djsite_app_directory }}/production state=link

        - name: Remove oldest releases directories
          cleanup_releases: >
            directory={{ djsite_app_directory }}/releases keep={{ djsite_max_releases|int }}
            ok_flag={{ djsite_release_ok_flag }} regexp=[0-9T]{8}T[0-9]{6}
          tags: cleanup
          when: djsite_release_mode == 'normal'
      tags: activate
  become: yes
  tags: update

# Celery Workers

- block:
    - name: Configure Celery workers
      template: >
        src={{ item.value.config_file|default('example.celery.worker.conf.j2') }}
        dest=/etc/supervisor/conf.d/{{ djsite_instance_name }}-celery-{{ item.value.name }}.conf
        mode=644
      loop_control:
        label: '{{ item.value.name }}'
      notify: restart celery workers
      with_dict: '{{ djsite_celery_workers }}'

    - name: Install Celery workers
      supervisorctl: >
        name={{ djsite_instance_name }}-celery-{{ item.value.name }} state=present
      loop_control:
        label: '{{ item.value.name }}'
      with_dict: '{{ djsite_celery_workers }}'

    - name: Setup periodic copy of Celery beat DB to shared storage
      cron: >
        name='Copy {{ djsite_instance_name }}-celery-{{ item.value.name }} database to shared storage'
        job='cp {{ djsite_app_directory }}/data/celery-beat.db.* {{ djsite_data_directory }}/'
        minute=*/5 user={{ djsite_daemon_user }} state=present
      loop_control:
        label: '{{ item.value.name }}'
      when: item.value.type == 'beat'
      with_dict: '{{ djsite_celery_workers }}'
  become: yes
  tags: [workers, config]

- block:
    - name: Start Celery workers
      supervisorctl: >
        name={{ djsite_instance_name }}-celery-{{ item.value.name }} state=started
      ignore_errors: yes
      loop_control:
        label: '{{ item.value.name }}'
      register: _djsite_celery_start
      with_dict: '{{ djsite_celery_workers }}'

    - name: Trigger Celery workers restart
      command: >
        ls /dev/null
      changed_when: yes
      check_mode: no
      notify: restart celery workers
      tags: update
      when: _djsite_celery_start is undefined or _djsite_celery_start|failed
  become: yes
  tags: [workers, services]
