input {
 file {
    type => "nginx-access"
    path => "/var/log/nginx/**/*access*.log"
    start_position => beginning
  }
}

input {
 file {
    type => "nginx-error"
    path => "/var/log/nginx/**/*error*.log"
    start_position => beginning
  }
}

filter {
  if [type] == "nginx-access" {
    grok {
      match => [
        "message", "%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{URIPATHPARAM:request}(?: HTTP/%{NUMBER:httpversion})?|-)\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) \"(?:%{URI:referrer}|-)\" %{QS:agent}%{GREEDYDATA}"
      ]
      remove_field => [ "message" ]
    }
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      remove_field => [ "timestamp" ]
    }
  }
  if [type] == "nginx-error" {
    grok {
      match => [
        "message", "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \"(?<upstream>[^\"]+)\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")?"
      ]
      remove_field => [ "message" ]
    }
    date {
      match => [ "timestamp", "YYYY/MM/dd HH:mm:s" ]
      remove_field => [ "timestamp" ]
    }
  }
  if [clientip] and [type] in ["nginx-access", "nginx-error"] {
    geoip {
      source => "clientip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate { convert => [ "[geoip][coordinates]", "float" ] }
  }
}
