input {
  file {
    type => "mysql-slow"
    path => "{{ item.mysql_slow_query_log_file }}"
    start_position => beginning

    # Key breaking the log up on the # User@Host line, this will mean sometimes a # Time line from the next entry will
    # be incorrectly included but since that isn't consistently present it can't be keyed off of.
    #
    # Due to the way the multiline codec works, previous must be used to collect everything which isn't the User line
    # up. Since queries can be multiline the User line can't be pushed forward as it would only collect the first line
    # of the actual query data.
    #
    # logstash will always be one slow query behind because it needs the User line to trigger that it is done with the
    # previous entry. A periodic "SELECT SLEEP(1);" where 1 is above the slow query threshold can be used to "flush"
    # these events through at the expense of having spurious log entries (see the drop filter).
    codec => multiline {
      pattern => "^# User@Host:"
      negate => true
      what => previous
    }
  }
}

filter {
  if [type] == "mysql-slow" {
    # Capture user, optional host and optional ip fields sample log file lines:
    # User@Host: logstash[logstash] @ localhost [127.0.0.1]
    # User@Host: logstash[logstash] @  [127.0.0.1]
    grok {
      match => [ "message", "^# User@Host: %{USER:user}(?:[[^]]+])?s+@s+%{IPORHOST:host}?s+[%{IP:ip}?]" ]
      remove_field => [ "message" ]
    }

    # Capture query time, lock time, rows returned and rows examined sample log file lines:
    # Query_time: 102.413328  Lock_time: 0.000167 Rows_sent: 0  Rows_examined: 1970
    # Query_time: 1.113464  Lock_time: 0.000128 Rows_sent: 1  Rows_examined: 0
    grok {
      match => [
        "message", "^# Query_time: %{NUMBER:duration:float}s+Lock_time: %{NUMBER:lock_wait:float} Rows_sent: %{NUMBER:results:int} s*Rows_examined: %{NUMBER:scanned:int}"
      ]
      remove_field => [ "message" ]
    }
    grok {
      match => [ "message", "^SET timestamp=%{NUMBER:timestamp};" ]
      remove_field => [ "message" ]
    }
    date {
      match => [ "timestamp", "UNIX" ]
      remove_field => [ "timestamp" ]
    }
  }
}

filter {
  if [type] == "mysql-slow" {
    # drop sleep events
    grok {
      match => [ "message", "SELECT SLEEP" ]
      tag_on_failure => []  # prevent default _grokparsefailure tag on real records
      add_tag => [ "sleep_drop" ]
    }
    if "sleep_drop" in [tags] { drop {} }
  }
}
