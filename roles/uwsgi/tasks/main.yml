# Install and configure uWSGI, daemonize with Supervisor, enable our Application
---

- block:
    - name: Install uWSGI packages
      package: >
        name={{ item }} state=present
      when: uwsgi_system_install|bool
      with_items: '{{ uwsgi_packages }}'

    # FIXME disable because it breaks running Python 2 applications
    # - name: Upgrade uWSGI
    #   pip: >
    #     executable=pip3 name=uwsgi state=latest

    # - name: Enable upgraded uWSGI
    #   file: >
    #     src=/usr/local/bin/uwsgi dest=/usr/bin/uwsgi force=yes state=link
    #   notify: restart uwsgi

    - meta: flush_handlers
  become: yes
  tags: [uwsgi, packages]

- block:
    - name: Check uWSGI is available inside the virtualenvs
      stat: >
        path={{ item.value.venv_path }}/bin/uwsgi
      loop_control:
        label: '{{ item.value.name }}'
      failed_when: not _uwsgi_bin.stat.exists
      register: _uwsgi_bin
      when: item.value.venv_path is defined
      with_dict: '{{ uwsgi_apps }}'

    - name: Configure uWSGI service
      template: >
        src=supervisor.conf.j2 dest=/etc/supervisor/conf.d/uwsgi-{{ item.value.name }}.conf mode=644
      loop_control:
        label: '{{ item.value.name }}'
      # FIXME do not reload all apps
      notify: reload uwsgi apps
      when: item.value.venv_path is defined
      with_dict: '{{ uwsgi_apps }}'

    - name: Configure the uWSGI applications
      template: >
        src={{ item.value.config_file }}
        dest=/etc/supervisor/conf.d/uwsgi-{{ item.value.name }}.{{ item.value.config_file.split('.')[-2] }}
        mode=644
      loop_control:
        label: '{{ item.value.name }}'
      # FIXME do not restart all apps
      notify: restart uwsgi apps
      when: item.value.venv_path is defined
      with_dict: '{{ uwsgi_apps }}'

    - name: Install the uWSGI applications
      supervisorctl: >
        name=uwsgi-{{ item.value.name }} state=present
      loop_control:
        label: '{{ item.value.name }}'
      when: item.value.venv_path is defined
      with_dict: '{{ uwsgi_apps }}'
  become: yes
  tags: [uwsgi, applications]

- block:
    - name: Start uWSGI service
      service: >
        name=uwsgi state=started enabled=yes
      register: _uwsgi_start

    - name: Restart uWSGI service
      service: >
        name=uwsgi state=restarted enabled=yes
      when: _uwsgi_start is failure
  become: yes
  tags: [uwsgi, services]
  when: uwsgi_system_install|bool

- name: Trigger uWSGI restart
  command: >
    ls /dev/null
  changed_when: yes
  check_mode: no
  notify: restart uwsgi
  tags: [uwsgi, update]
  when: uwsgi_system_install|bool and uwsgi_reload_on_update|bool

- block:
    - name: Setup the uWSGI applications
      template: >
        src={{ item.value.config_file }}
        dest=/etc/uwsgi/apps-available/{{ item.value.name }}.{{ item.value.config_file.split('.')[-2] }}
        mode=644
      loop_control:
        label: '{{ item.value.name }}'
      notify: reload uwsgi
      when: item.value.venv_path is undefined
      with_dict: '{{ uwsgi_apps }}'

    - name: Enable the uWSGI applications
      file: >
        src=/etc/uwsgi/apps-available/{{ item.value.name }}.{{ item.value.config_file.split('.')[-2] }}
        dest=/etc/uwsgi/apps-enabled/{{ item.value.name }}.{{ item.value.config_file.split('.')[-2] }}
        state=link
      loop_control:
        label: '{{ item.value.name }}'
      notify: reload uwsgi
      when: item.value.venv_path is undefined
      with_dict: '{{ uwsgi_apps }}'
  become: yes
  tags: [uwsgi, applications]
  when: uwsgi_system_install|bool
