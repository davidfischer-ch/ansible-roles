# https://docs.docker.com/engine/installation/ubuntulinux/
---

- block:
    - name: Install Docker Machine
      get_url: >
        url=https://github.com/docker/machine/releases/download/v{{ docker_machine_version }}/docker-machine_linux-amd64
        dest='{{ docker_machine_path }}' mode=755 sha256sum={{ docker_machine_checksum }}
      become: yes

    - name: Provision Docker Machines
      command: >
        docker-machine create -d {{ item.value.provider }} {{ item.key }} {{ item.extra|default('') }}
      tags: provision
      with_dict: '{{ docker_machines }}'
  tags: [docker, packages]
  when: docker_install_machine|bool

- name: Install Docker Compose
  get_url: >
    url=https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/run.sh
    dest='{{ docker_compose_path }}' mode=755 sha256sum={{ docker_compose_checksum }}
  become: yes
  tags: [docker, packages]
  when: docker_install_compose|bool

- block:
    - name: Register Docker apt key
      apt_key: >
        keyserver=hkp://p80.pool.sks-keyservers.net:80 id={{ docker_apt_key }} state=present
      when: "ansible_pkg_mgr == 'apt'"

    - name: Register Docker apt repository
      apt_repository: >
        repo='{{ docker_apt_repository }}' update_cache=yes state=present
      when: "ansible_pkg_mgr == 'apt'"

    - name: Install Docker Engine packages
      package: >
        name={{ item }} state=present
      with_items: '{{ docker_packages }}'
  become: yes
  tags: [docker, packages]
  when: docker_install_engine|bool

- name: Install Docker Engine Python packages
  pip: >
    name={{ item }} state=present
  become: yes
  tags: [docker, packages]
  with_items: '{{ docker_python_packages }}'

# FIXME https://github.com/docker/compose/pull/2513#issuecomment-172494821 issue with non tty
# - name: Check Docker Compose version
#   shell:
#     docker-compose version --short
#   become: yes  # FIXME calling docker as simple user is not yet working
#   failed_when: _docker_compose_version.stdout != docker_compose_version
#   register: _docker_compose_version
#   tags: [docker, packages]

# Setup memory and swap accounting

- block:
    - name: Check GNU/Linux Kernel supports memory/swap accounting
      assert:
        that:
          "kernel_config[item] == 'y'"
      with_items:
        - memcg
        - memcg_kmem
        - memcg_swap

    - name: Enable the memory/swap accounting
      lineinfile: >
        dest=/etc/default/grub regexp='GRUB_CMDLINE_LINUX=' backup=yes state=present
        line='GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1 noprompt"'
      notify: update grub

    - name: Create the docker group
      group: >
        name=docker state=present

    - name: Check memory/swap accounting is active
      command: >
        cat /proc/cmdline
      always_run: yes
      become: no
      changed_when: "'cgroup_enable=memory' not in _docker_cmdline.stdout"
      notify:
        - update grub
        - restart
        - wait started
      register: _docker_cmdline

    # Allow our user to communicate with docker daemon without sudo

    - name: Add our user to the docker group
      user: >
        name={{ ansible_user }} groups=docker append=yes state=present
      notify:
        - restart
        - wait started

    # Restart if necessary
    - meta: flush_handlers
  become: yes
  tags: [docker, config]
  when: docker_install_engine|bool

- block:
    - name: Start Docker service
      service: >
        name=docker state=started enabled=yes
      become: yes

    - name: Verify Docker is installed correctly
      command: >
        docker run hello-world
      changed_when: no
  tags: [docker, services]
  when: docker_install_engine|bool

# https://github.com/docker/distribution/blob/master/docs/deploying.md

- name: Start Docker Registry service
  docker: >
    name=registry image=registry ports=5000:5000 restart_policy=always state=started
  tags: [docker, services]
  when: docker_install_registry|bool

# Pull some images from the Docker Hub and push into our registry

- block:
    - name: Get images from Docker Hub
      command: >
        docker pull {{ item }}
      changed_when: "'up to date' not in _docker_pull.stdout"
      register: _docker_pull
      with_items: '{{ docker_images }}'

    - name: Tag images to point to our registry
      command: >
        docker tag {{ item }} localhost:5000/{{ item }}
      # changed_when: "'already set' not in _docker_tag.stderr"
      # failed_when: _docker_tag|failed and 'already set' not in _docker_tag.stderr
      # register: _docker_tag
      with_items: '{{ docker_images }}'

    - name: Push images into our registry
      command: >
        docker push localhost:5000/{{ item }}
      changed_when: "'successfully pushed' in _docker_push.stdout"
      register: _docker_push
      with_items: '{{ docker_images }}'
  tags: [docker, images]
  when: docker_install_registry|bool

# To stop your registry, you would:
# docker stop registry && docker rm -v registry
