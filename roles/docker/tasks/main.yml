# https://docs.docker.com/engine/installation/ubuntulinux/
---

- block:
    - name: Install Docker Machine
      get_url:
        url: https://github.com/docker/machine/releases/download/v{{ docker_machine_version }}/docker-machine-{{ ansible_system }}-{{ ansible_architecture }}
        dest: '{{ docker_machine_path }}'
        mode: 0755
        sha256sum: '{{ docker_machine_checksum }}'
      become: yes

    - name: Provision Docker Machines
      command: >
        docker-machine create -d {{ item.value.provider }} {{ item.key }} {{ item.extra|default('') }}
      tags: provision
      with_dict: '{{ docker_machines }}'
  tags: [docker, packages]
  when: docker_install_machine|bool

- name: Install Docker Compose
  get_url:
    url: https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/run.sh
    dest: '{{ docker_compose_path }}'
    mode: 0755
    sha256sum: '{{ docker_compose_checksum }}'
  become: yes
  tags: [docker, packages]
  when: docker_install_compose|bool

- block:
    - name: Register Docker apt key
      apt_key:
        keyserver: hkp://p80.pool.sks-keyservers.net:80
        id: '{{ docker_apt_key }}'
        state: present
      when: "ansible_pkg_mgr == 'apt'"

    - name: Register Docker apt repository
      apt_repository:
        repo: '{{ docker_apt_repository }}'
        filename: ansible_roles_docker
        state: present
        update_cache: yes
      when: "ansible_pkg_mgr == 'apt'"

    - name: Install Docker Engine packages
      package:
        name: '{{ docker_packages }}'
        state: present
  become: yes
  tags: [docker, packages]
  when: docker_install_engine|bool

- name: Install Docker Engine Python packages
  pip:
    name: '{{ docker_python_packages }}'
    state: present
  become: yes
  tags: [docker, packages]

# FIXME https://github.com/docker/compose/pull/2513#issuecomment-172494821 issue with non tty
# - name: Check Docker Compose version
#   shell:
#     docker-compose version --short
#   become: yes  # FIXME calling docker as simple user is not yet working
#   failed_when: _docker_compose_version.stdout != docker_compose_version
#   register: _docker_compose_version
#   tags: [docker, packages]

# Setup memory and swap accounting

- block:
    - name: Check GNU/Linux Kernel supports memory/swap accounting
      assert:
        that:
          "kernel_config[item] == 'y'"
      loop:
        - memcg
        - memcg_kmem
        - memcg_swap

    - name: Enable the memory/swap accounting
      lineinfile:
        dest: /etc/default/grub
        backup: yes
        line: 'GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1 noprompt"'
        regexp: 'GRUB_CMDLINE_LINUX='
        state: present
      notify: update grub

    - name: Create the docker group
      group:
        name: docker
        state: present

    - name: Check memory/swap accounting is active
      command: >
        cat /proc/cmdline
      become: no
      changed_when: "'cgroup_enable=memory' not in _docker_cmdline.stdout"
      check_mode: no
      notify:
        - update grub
        - restart
        - wait started
      register: _docker_cmdline

    # Allow our user to communicate with docker daemon without sudo

    - name: Add our user to the docker group
      user:
        name: '{{ ansible_user }}'
        append: yes
        groups: docker
        state: present
      notify:
        - restart
        - wait started

    # Restart if necessary
    - meta: flush_handlers
  become: yes
  tags: [docker, config]
  when: docker_install_engine|bool

- block:
    - name: Start Docker service
      service:
        name: docker
        enabled: yes
        state: started
      become: yes

    - name: Verify Docker is installed correctly
      command:
        docker run hello-world
      changed_when: no
  tags: [docker, services]
  when: docker_install_engine|bool

# https://github.com/docker/distribution/blob/master/docs/deploying.md

- name: Start Docker Registry service
  docker:
    name: registry
    image: registry
    ports: 5000:5000
    restart_policy: always
    state: started
  tags: [docker, services]
  when: docker_install_registry|bool

# Pull some images from the Docker Hub and push into our registry

- block:
    - name: Get images from Docker Hub
      docker_image:
        name: '{{ item }}'
      loop: '{{ docker_images }}'

    - name: Tag and push to local registry
      docker_image:
         name: '{{ item }}'
         push: yes
         repository: localhost:5000/{{ item }}
         tag: latest
      loop: '{{ docker_images }}'
      when: docker_install_registry|bool
  tags: [docker, images]

# To stop your registry, you would:
# docker stop registry && docker rm -v registry
