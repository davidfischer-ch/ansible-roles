# Generator: ./generate-config.py
# Date: 2020-04-02 07:50:46.508832

[colors]

# Defines the color to use on 'Changed' task status
changed = yellow

# Defines the default color to use for ansible-console
console_prompt = white

# Defines the color to use when emitting debug messages
debug = dark gray

# Defines the color to use when emitting deprecation messages
deprecate = purple

# Defines the color to use when showing added lines in diffs
diff_add = green

# Defines the color to use when showing diffs
diff_lines = cyan

# Defines the color to use when showing removed lines in diffs
diff_remove = red

# Defines the color to use when emitting error messages
error = red

# Defines the color to use for highlighting
highlight = white

# Defines the color to use when showing 'OK' task status
ok = green

# Defines the color to use when showing 'Skipped' task status
skip = cyan

# Defines the color to use on 'Unreachable' status
unreachable = bright red

# Defines the color to use when emitting verbose messages. i.e those that show with '-v's.
verbose = blue

# Defines the color to use when emitting warning messages
warn = bright purple

[connection]

# Pipelining, if supported by the connection plugin, reduces the number of network operations required to execute a module on the remote server, by executing many Ansible modules without actual file transfer.
# This can result in a very significant performance improvement when enabled.
# However this conflicts with privilege escalation (become). For example, when using 'sudo:' operations you must first disable 'requiretty' in /etc/sudoers on all managed hosts, which is why it is disabled by default.
# This options is disabled if ``ANSIBLE_KEEP_REMOTE_FILES`` is enabled.
pipelining = False

[defaults]

# Colon separated paths in which Ansible will search for Action Plugins.
action_plugins = ~/.ansible/plugins/action:/usr/share/ansible/plugins/action

# By default Ansible will issue a warning when received from a task action (module or action plugin)
# These warnings can be silenced by adjusting this setting to False.
action_warnings = True

# When enabled, this option allows lookup plugins (whether used in variables as ``{{lookup('foo')}}`` or as a loop as with_foo) to return data that is not marked 'unsafe'.
# By default, such data is marked as unsafe to prevent the templating engine from evaluating any jinja2 templating language, as this could represent a security risk.  This option is provided to allow for backwards-compatibility, however users should first consider adding allow_unsafe=True to any lookups which may be expected to contain data which may be run through the templating engine late
allow_unsafe_lookups = False

# This makes the temporary files created on the machine to be world readable and will issue a warning instead of failing the task.
# It is useful when becoming an unprivileged user.
allow_world_readable_tmpfiles = False

# Sets the macro for the 'ansible_managed' variable available for M(template) and M(win_template) modules.  This is only relevant for those two modules.
ansible_managed = Ansible managed

# Sets the default value for the any_errors_fatal keyword, if True, Task failures will be considered fatal errors.
any_errors_fatal = False

# This controls whether an Ansible playbook should prompt for a login password. If using SSH keys for authentication, you probably do not needed to change this setting.
ask_pass = False

# This controls whether an Ansible playbook should prompt for a vault password.
ask_vault_pass = False

# Colon separated paths in which Ansible will search for Become Plugins.
become_plugins = ~/.ansible/plugins/become:/usr/share/ansible/plugins/become

# Controls whether callback plugins are loaded when running /usr/bin/ansible. This may be used to log activity from the command line, send notifications, and so on. Callback plugins are always loaded for ``ansible-playbook``.
bin_ansible_callbacks = False

# Colon separated paths in which Ansible will search for Cache Plugins.
cache_plugins = ~/.ansible/plugins/cache:/usr/share/ansible/plugins/cache

# Whitelist of callable methods to be made available to template evaluation
# callable_whitelist =

# Colon separated paths in which Ansible will search for Callback Plugins.
callback_plugins = ~/.ansible/plugins/callback:/usr/share/ansible/plugins/callback

# List of whitelisted callbacks, not all callbacks need whitelisting, but many of those shipped with Ansible do as we don't want them activated by default.
# callback_whitelist =

# Colon separated paths in which Ansible will search for Cliconf Plugins.
cliconf_plugins = ~/.ansible/plugins/cliconf:/usr/share/ansible/plugins/cliconf

# Colon separated paths in which Ansible will search for collections content.
collections_paths = ~/.ansible/collections:/usr/share/ansible/collections

# By default Ansible will issue a warning when the shell or command module is used and the command appears to be similar to an existing Ansible module.
# These warnings can be silenced by adjusting this setting to False. You can also control this at the task level with the module option ``warn``.
command_warnings = True

# With this setting on (True), running conditional evaluation 'var' is treated differently than 'var.subkey' as the first is evaluated directly while the second goes through the Jinja2 parser. But 'false' strings in 'var' get evaluated as booleans.
# With this setting off they both evaluate the same but in cases in which 'var' was 'false' (a string) it won't get evaluated as a boolean anymore.
# Currently this setting defaults to 'True' but will soon change to 'False' and the setting itself will be removed in the future.
# Expect the default to change in version 2.10 and that this setting eventually will be deprecated after 2.12
conditional_bare_variables = True

# Colon separated paths in which Ansible will search for Connection Plugins.
connection_plugins = ~/.ansible/plugins/connection:/usr/share/ansible/plugins/connection

# This allows you to chose a specific cowsay stencil for the banners or use 'random' to cycle through them.
cow_selection = default

# White list of cowsay templates that are 'safe' to use, set to empty list if you want to enable all installed templates.
cow_whitelist = bud-frogs,bunny,cheese,daemon,default,dragon,elephant,elephant-in-snake,eyes,hellokitty,kitty,luke-koala,meow,milk,moofasa,moose,ren,sheep,small,stegosaurus,stimpy,supermilker,three-eyes,turkey,turtle,tux,udder,vader,vader-koala,www

# Specify a custom cowsay path or swap in your cowsay implementation of choice
# cowpath =

# Toggles debug output in Ansible. This is *very* verbose and can hinder multiprocessing.  Debug output can also include secret information despite no_log settings being enabled, which means debug mode should not be used in production.
debug = False

# Toggle to control the showing of deprecation warnings
deprecation_warnings = True

# Normally ``ansible-playbook`` will print a header for each task that is run. These headers will contain the name: field from the task if you specified one. If you didn't then ``ansible-playbook`` uses the task's action to help you tell which task is presently running. Sometimes you run many of the same action and so you want more information about the task to differentiate it from others of the same action. If you set this variable to True in the config then ``ansible-playbook`` will also include the task's arguments in the header.
# This setting defaults to False because there is a chance that you have sensitive values in your parameters and you do not want those to be printed.
# If you set this to True you should be sure that you have secured your environment's stdout (no one can shoulder surf your screen and you aren't saving stdout to an insecure file) or made sure that all of your playbooks explicitly added the ``no_log: True`` parameter to tasks which have sensitive values See How do I keep secret data in my playbook? for more information.
display_args_to_stdout = False

# Toggle to control displaying skipped task/host entries in a task in the default callback
display_skipped_hosts = False

# Colon separated paths in which Ansible will search for Documentation Fragments Plugins.
doc_fragment_plugins = ~/.ansible/plugins/doc_fragments:/usr/share/ansible/plugins/doc_fragments

# Root docsite URL used to generate docs URLs in warning/error text; must be an absolute URL with valid scheme and trailing slash.
docsite_root_url = https://docs.ansible.com/ansible/

# By default Ansible will issue a warning when a duplicate dict key is encountered in YAML.
# These warnings can be silenced by adjusting this setting to False.
duplicate_dict_key = warn

# Whether or not to enable the task debugger, this previously was done as a strategy plugin.
# Now all strategy plugins can inherit this behavior. The debugger defaults to activating when
# a task is failed on unreachable. Use the debugger keyword for more flexibility.
enable_task_debugger = False

# Toggle to allow missing handlers to become a warning instead of an error when notifying.
error_on_missing_handler = True

# When True, this causes ansible templating to fail steps that reference variable names that are likely typoed.
# Otherwise, any '{{ template_expression }}' that contains undefined variables will be rendered in a template or ansible action line exactly as written.
error_on_undefined_vars = True

# This indicates the command to use to spawn a shell under for Ansible's execution needs on a target. Users may need to change this in rare instances when shell usage is constrained, but in most cases it may be left as is.
executable = /bin/sh

# Chooses which cache plugin to use, the default 'memory' is ephimeral.
fact_caching = memory

# Defines connection or path information for the cache plugin
# fact_caching_connection =

# Prefix to use for cache plugin files/tables
fact_caching_prefix = ansible_facts

# Expiration timeout for the cache plugin data
fact_caching_timeout = 86400

# This option allows you to globally configure a custom path for 'local_facts' for the implied M(setup) task when using fact gathering.
# If not set, it will fallback to the default from the M(setup) module: ``/etc/ansible/facts.d``.
# This does **not** affect  user defined tasks that use the M(setup) module.
# fact_path =

# Which modules to run during a play's fact gathering stage, using the default of 'smart' will try to figure it out based on connection type.
facts_modules = smart

# Colon separated paths in which Ansible will search for Jinja2 Filter Plugins.
filter_plugins = ~/.ansible/plugins/filter:/usr/share/ansible/plugins/filter

# This options forces color mode even when running without a TTY or the "nocolor" setting is True.
force_color = False

# This option controls if notified handlers run on a host even if a failure occurs on that host.
# When false, the handlers will not run if a failure has occurred on a host.
# This can also be set per play or on the command line. See Handlers and Failure for more details.
force_handlers = False

# Make ansible transform invalid characters in group names supplied by inventory sources.
# If 'never' it will allow for the group name but warn about the issue.
# When 'ignore', it does the same as 'never', without issuing a warning.
# When 'always' it will replace any invalid charachters with '_' (underscore) and warn the user
# When 'silently', it does the same as 'always', without issuing a warning.
force_valid_group_names = never

# Maximum number of forks Ansible will use to execute tasks on target hosts.
forks = 5

# Set the `gather_subset` option for the M(setup) task in the implicit fact gathering. See the module documentation for specifics.
# It does **not** apply to user defined M(setup) tasks.
gather_subset = all

# Set the timeout in seconds for the implicit fact gathering.
# It does **not** apply to user defined M(setup) tasks.
gather_timeout = 10

# This setting controls the default policy of fact gathering (facts discovered about remote systems).
# When 'implicit' (the default), the cache plugin will be ignored and facts will be gathered per play unless 'gather_facts: False' is set.
# When 'explicit' the inverse is true, facts will not be gathered unless directly requested in the play.
# The 'smart' value means each new host that has no facts discovered will be scanned, but if the same host is addressed in multiple plays it will not be contacted again in the playbook run.
# This option can be useful for those wishing to save fact gathering time. Both 'smart' and 'explicit' will use the cache plugin.
gathering = smart

# This setting controls how variables merge in Ansible. By default Ansible will override variables in specific precedence orders, as described in Variables. When a variable of higher precedence wins, it will replace the other value.
# Some users prefer that variables that are hashes (aka 'dictionaries' in Python terms) are merged. This setting is called 'merge'. This is not the default behavior and it does not affect variables whose values are scalars (integers, strings) or arrays.  We generally recommend not using this setting unless you think you have an absolute need for it, and playbooks in the official examples repos do not use this setting
# In version 2.0 a ``combine`` filter was added to allow doing this for a particular variable (described in Filters).
hash_behaviour = replace

# Set this to "False" if you want to avoid host key checking by the underlying tools Ansible uses to connect to the host
host_key_checking = True

# Colon separated paths in which Ansible will search for HttpApi Plugins.
httpapi_plugins = ~/.ansible/plugins/httpapi:/usr/share/ansible/plugins/httpapi

# Facts are available inside the `ansible_facts` variable, this setting also pushes them as their own vars in the main namespace.
# Unlike inside the `ansible_facts` dictionary, these will have an `ansible_` prefix.
inject_facts_as_vars = True

# This sets the interval (in seconds) of Ansible internal processes polling each other. Lower values improve performance with large playbooks at the expense of extra CPU load. Higher values are more suitable for Ansible usage in automation scenarios, when UI responsiveness is not required but CPU usage might be a concern.
# The default corresponds to the value hardcoded in Ansible <= 2.1
internal_poll_interval = 0.001

# Path to the Python interpreter to be used for module execution on remote targets, or an automatic discovery mode. Supported discovery modes are ``auto``, ``auto_silent``, and ``auto_legacy`` (the default). All discovery modes employ a lookup table to use the included system Python (on distributions known to include one), falling back to a fixed ordered list of well-known Python interpreter locations if a platform-specific default is not available. The fallback behavior will issue a warning that the interpreter should be set explicitly (since interpreters installed later may change which one is used). This warning behavior can be disabled by setting ``auto_silent``. The default value of ``auto_legacy`` provides all the same behavior, but for backwards-compatibility with older Ansible releases that always defaulted to ``/usr/bin/python``, will use that interpreter if present (and issue a warning that the default behavior will change to that of ``auto`` in a future Ansible release.
interpreter_python = auto_legacy

# If 'false', invalid attributes for a task will result in warnings instead of errors
invalid_task_attribute_failed = True

# Comma separated list of Ansible inventory sources
inventory = /etc/ansible/hosts

# List of extensions to ignore when using a directory as an inventory source
inventory_ignore_extensions = {{(BLACKLIST_EXTS + ( '.orig', '.ini', '.cfg', '.retry'))}}

# List of patterns to ignore when using a directory as an inventory source
# inventory_ignore_patterns =

# Colon separated paths in which Ansible will search for Inventory Plugins.
inventory_plugins = ~/.ansible/plugins/inventory:/usr/share/ansible/plugins/inventory

# This is a developer-specific feature that allows enabling additional Jinja2 extensions.
# See the Jinja2 documentation for details. If you do not know what these do, you probably don't need to change this setting :)
# jinja2_extensions =

# This option preserves variable types during template operations. This requires Jinja2 >= 2.10.
jinja2_native = False

# Enables/disables the cleaning up of the temporary files Ansible used to execute the tasks on the remote.
# If this option is enabled it will disable ``ANSIBLE_PIPELINING``.
keep_remote_files = False

# Colon separated paths in which Ansible will search for Modules.
library = ~/.ansible/plugins/modules:/usr/share/ansible/plugins/modules

# Temporary directory for Ansible to use on the controller.
local_tmp = ~/.ansible/tmp

# By default Ansible will issue a warning when there are no hosts in the inventory.
# These warnings can be silenced by adjusting this setting to False.
localhost_warning = True

# List of logger names to filter out of the log file
# log_filter =

# File to which Ansible will log on the controller. When empty logging is disabled.
# log_path =

# Colon separated paths in which Ansible will search for Lookup Plugins.
lookup_plugins = ~/.ansible/plugins/lookup:/usr/share/ansible/plugins/lookup

# Maximum size of files to be considered for diff display
max_diff_size = 104448

# This sets the default arguments to pass to the ``ansible`` adhoc binary if no ``-a`` is specified.
# module_args =

# Compression scheme to use when transferring Python modules to the target.
module_compression = ZIP_DEFLATED

# Module to use with the ``ansible`` AdHoc command, if none is specified via ``-m``.
module_name = command

# Colon separated paths in which Ansible will search for Module utils files, which are shared by modules.
module_utils = ~/.ansible/plugins/module_utils:/usr/share/ansible/plugins/module_utils

# Colon separated paths in which Ansible will search for Netconf Plugins.
netconf_plugins = ~/.ansible/plugins/netconf:/usr/share/ansible/plugins/netconf

# TODO: write it
network_group_modules = aireos,aruba,asa,bigip,ce,dellos10,dellos6,dellos9,enos,eos,ios,iosxr,ironware,junos,netconf,nxos,onyx,sros,vyos

# Toggle Ansible's display and logging of task details, mainly used to avoid security disclosures.
no_log = False

# Toggle Ansible logging to syslog on the target when it executes tasks.
no_target_syslog = False

# This setting allows suppressing colorizing output, which is used to give a better indication of failure and status information.
nocolor = False

# If you have cowsay installed but want to avoid the 'cows' (why????), use this.
nocows = False

# What templating should return as a 'null' value. When not set it will let Jinja2 decide.
# null_representation =

# Previouslly Ansible would only clear some of the plugin loading caches when loading new roles, this led to some behaviours in which a plugin loaded in prevoius plays would be unexpectedly 'sticky'. This setting allows to return to that behaviour.
old_plugin_cache_clear = False

# A number of non-playbook CLIs have a ``--playbook-dir`` argument; this sets the default value for it.
# playbook_dir =

# This sets which playbook dirs will be used as a root to process vars plugins, which includes finding host_vars/group_vars
# The ``top`` option follows the traditional behaviour of using the top playbook in the chain to find the root directory.
# The ``bottom`` option follows the 2.4.0 behaviour of using the current playbook to find the root directory.
# The ``all`` option examines from the first parent to the current playbook.
playbook_vars_root = top

# For asynchronous tasks in Ansible (covered in Asynchronous Actions and Polling), this is how often to check back on the status of those tasks when an explicit poll interval is not supplied. The default is a reasonably moderate 15 seconds which is a tradeoff between checking in frequently and providing a quick turnaround when something may have completed.
poll_interval = 15

# Allows to change the group variable precedence merge order.
precedence = all_inventory,all_plugins_inventory,all_plugins_play,groups_inventory,groups_plugins_inventory,groups_plugins_play

# Option for connections using a certificate or key file to authenticate, rather than an agent or passwords, you can set the default value here to avoid re-specifying --private-key with every invocation.
# private_key_file =

# Makes role variables inaccessible from other roles.
# This was introduced as a way to reset role variables to default values if a role is used more than once in a playbook.
private_role_vars = False

# Attempts to set RLIMIT_NOFILE soft limit to the specified value when executing Python modules (can speed up subprocess usage on Python 2.x. See https://bugs.python.org/issue11284). The value will be limited by the existing hard limit. Default value of 0 does not attempt to adjust existing system-defined limits.
python_module_rlimit_nofile = 0

# Port to use in remote connections, when blank it will use the connection plugin default.
# remote_port =

# Sets the login user for the target machines
# When blank it uses the connection plugin's default, normally the user currently executing Ansible.
# remote_user =

# This controls whether a failed Ansible playbook should create a .retry file.
retry_files_enabled = False

# This sets the path in which Ansible will save .retry files when a playbook fails and retry files are enabled.
# retry_files_save_path =

# Colon separated paths in which Ansible will search for Roles.
roles_path = ~/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles

# This adds the custom stats set via the set_stats plugin to the default output
show_custom_stats = False

# Set the main callback used to display Ansible output, you can only have one at a time.
# You can have many other callbacks, but just one can be in charge of stdout.
stdout_callback = default

# Set the default strategy used for plays.
strategy = linear

# Colon separated paths in which Ansible will search for Strategy Plugins.
strategy_plugins = ~/.ansible/plugins/strategy:/usr/share/ansible/plugins/strategy

# Action to take when a module parameter value is converted to a string (this does not affect variables). For string parameters, values such as '1.00', "['a', 'b',]", and 'yes', 'y', etc. will be converted by the YAML parser unless fully quoted.
# Valid options are 'error', 'warn', and 'ignore'.
# Since 2.8, this option defaults to 'warn' but will change to 'error' in 2.12.
string_conversion_action = warn

# Toggle the use of "su" for tasks.
su = False

# Syslog facility to use when Ansible logs to the remote target
syslog_facility = LOG_USER

# Allows disabling of warnings related to potential issues on the system running ansible itself (not on the managed hosts)
# These may include warnings about 3rd party packages or other conditions that should be resolved if possible.
system_warnings = True

# This option defines whether the task debugger will be invoked on a failed task when ignore_errors=True is specified.
# True specifies that the debugger will honor ignore_errors, False will not honor ignore_errors.
task_debugger_ignore_errors = True

# Colon separated paths in which Ansible will search for Terminal Plugins.
terminal_plugins = ~/.ansible/plugins/terminal:/usr/share/ansible/plugins/terminal

# Colon separated paths in which Ansible will search for Jinja2 Test Plugins.
test_plugins = ~/.ansible/plugins/test:/usr/share/ansible/plugins/test

# This is the default timeout for connection plugins to use.
timeout = 10

# Default connection plugin to use, the 'smart' option will toggle between 'ssh' and 'paramiko' depending on controller OS and ssh versions
transport = smart

# Toggles the use of persistence for connections.
use_persistent_connections = False

# Colon separated paths in which Ansible will search for Vars Plugins.
vars_plugins = ~/.ansible/plugins/vars:/usr/share/ansible/plugins/vars

# The vault_id to use for encrypting by default. If multiple vault_ids are provided, this specifies which to use for encryption. The --encrypt-vault-id cli option overrides the configured value.
# vault_encrypt_identity =

# If true, decrypting vaults with a vault id will only try the password from the matching vault-id
vault_id_match = False

# The label to use for the default vault id label in cases where a vault id label is not provided
vault_identity = default

# A list of vault-ids to use by default. Equivalent to multiple --vault-id args. Vault-ids are tried in order.
# vault_identity_list =

# The vault password file to use. Equivalent to --vault-password-file or --vault-id
# vault_password_file =

# Force 'verbose' option to use stderr instead of stdout
verbose_to_stderr = False

# Sets the default verbosity, equivalent to the number of ``-v`` passed in the command line.
verbosity = 0

# Check all of these extensions when looking for 'variable' files which should be YAML or JSON or vaulted versions of these.
# This affects vars_files, include_vars, inventory and vars plugins among others.
yaml_valid_extensions = .json,.yaml,.yml

[diff]

# Configuration toggle to tell modules to show differences when in 'changed' status, equivalent to ``--diff``.
always = False

# How many lines of context to show when displaying the differences between files.
context = 3

[galaxy]

# If set to yes, ansible-galaxy will not validate TLS certificates. This can be useful for testing against a server with a self-signed certificate.
ignore_certs = False

# Role or collection skeleton directory to use as a template for the ``init`` action in ``ansible-galaxy``, same as ``--role-skeleton``.
# role_skeleton =

# patterns of files to ignore inside a Galaxy role or collection skeleton directory
role_skeleton_ignore = ^.*/.git_keep$,^.git$

# URL to prepend when roles don't specify the full URI, assume they are referencing this server as the source.
server = https://galaxy.ansible.com

# A list of Galaxy servers to use when installing a collection.
# The value corresponds to the config ini header ``[galaxy_server.{{item}}]`` which defines the server details.
# See :ref:`galaxy_server_config` for more details on how to define a Galaxy server.
# The order of servers in this list is used to as the order in which a collection is resolved.
# Setting this config option will ignore the :ref:`galaxy_server` config option.
# server_list =

# GitHub personal access token
# token =

# Local path to galaxy access token file
token_path = ~/.ansible/galaxy_token

[inventory]

# If 'true', it is a fatal error when any given inventory source cannot be successfully parsed by any available inventory plugin; otherwise, this situation only attracts a warning.

any_unparsed_is_failed = False

# Toggle to turn on inventory caching
cache = False

# The inventory cache connection. If INVENTORY_CACHE_PLUGIN_CONNECTION is not provided CACHE_PLUGIN_CONNECTION can be used instead.
# cache_connection =

# The plugin for caching inventory. If INVENTORY_CACHE_PLUGIN is not provided CACHE_PLUGIN can be used instead.
# cache_plugin =

# The table prefix for the cache plugin. If INVENTORY_CACHE_PLUGIN_PREFIX is not provided CACHE_PLUGIN_PREFIX can be used instead.
cache_prefix = ansible_facts

# Expiration timeout for the inventory cache plugin data. If INVENTORY_CACHE_TIMEOUT is not provided CACHE_TIMEOUT can be used instead.
cache_timeout = 3600

# List of enabled inventory plugins, it also determines the order in which they are used.
enable_plugins = auto,host_list,ini,script,toml,yaml

# Controls if ansible-inventory will accurately reflect Ansible's view into inventory or its optimized for exporting.
export = False

# This setting changes the behaviour of mismatched host patterns, it allows you to force a fatal error, a warning or just ignore it
host_pattern_mismatch = warning

# If 'true' it is a fatal error if every single potential inventory source fails to parse, otherwise this situation will only attract a warning.

unparsed_is_failed = False

[jinja2]

# This list of filters avoids 'type conversion' when templating variables
# Useful when you want to avoid conversion into lists or dictionaries for JSON strings, for example.
dont_type_filters = json,ppretty,string,to_json,to_nice_json,to_yaml

[netconf_connection]

# This variable is used to enable bastion/jump host with netconf connection. If set to True the bastion/jump host ssh settings should be present in ~/.ssh/config file, alternatively it can be set to custom ssh configuration file path to read the bastion/jump host settings.
# ssh_config =

[paramiko_connection]

# TODO: write it
host_key_auto_add = False

# TODO: write it
look_for_keys = True

[persistent_connection]

# Specify where to look for the ansible-connection script. This location will be checked before searching $PATH.
# If null, ansible will start with the same directory as the ansible script.
# ansible_connection_path =

# This controls the amount of time to wait for response from remote device before timing out persistent connection.
command_timeout = 30

# This controls the retry timeout for persistent connection to connect to the local domain socket.
connect_retry_timeout = 15

# This controls how long the persistent connection will remain idle before it is destroyed.
connect_timeout = 30

# Path to socket to be used by the connection persistence system.
control_path_dir = ~/.ansible/pc

[privilege_escalation]

# Display an agnostic become prompt instead of displaying a prompt containing the command line supplied become method
agnostic_become_prompt = True

# Toggles the use of privilege escalation, allowing you to 'become' another user after login.
become = False

# This setting controls if become is skipped when remote user and become user are the same. I.E root sudo to root.
become_allow_same_user = False

# Toggle to prompt for privilege escalation password.
become_ask_pass = False

# executable to use for privilege escalation, otherwise Ansible will depend on PATH
# become_exe =

# Flags to pass to the privilege escalation executable.
# become_flags =

# Privilege escalation method to use when `become` is enabled.
become_method = sudo

# The user your login/remote user 'becomes' when using privilege escalation, most systems will use 'root' when no user is specified.
become_user = root

[selinux]

# This setting causes libvirt to connect to lxc containers by passing --noseclabel to virsh. This is necessary when running on systems which do not have SELinux.
libvirt_lxc_noseclabel = False

# Some filesystems do not support safe operations and/or return inconsistent errors, this setting makes Ansible 'tolerate' those in the list w/o causing fatal errors.
# Data corruption may occur and writes are not always verified when a filesystem is in the list.
special_context_filesystems = fuse, nfs, vboxsf, ramfs, 9p, vfat

[ssh_connection]

# This is the location to save ssh's ControlPath sockets, it uses ssh's variable substitution.
# Since 2.3, if null, ansible will generate a unique hash. Use `%(directory)s` to indicate where to use the control dir path setting.
# Before 2.3 it defaulted to `control_path=%(directory)s/ansible-ssh-%%h-%%p-%%r`.
# Be aware that this setting is ignored if `-o ControlPath` is set in ssh args.
# control_path =

# This sets the directory to use for ssh control path if the control path setting is null.
# Also, provides the `%(directory)s` variable for the control path setting.
control_path_dir = ~/.ansible/cp

# Number of attempts to establish a connection before we give up and report the host as 'UNREACHABLE'
retries = 0

# Preferred method to use when transferring files over ssh.
# When set to smart, Ansible will try them until one succeeds or they all fail.
# If set to True, it will force 'scp', if False it will use 'sftp'.
scp_if_ssh = smart

# TODO: write it
sftp_batch_mode = True

# If set, this will override the Ansible default ssh arguments.
# In particular, users may wish to raise the ControlPersist time to encourage performance.  A value of 30 minutes may be appropriate.
# Be aware that if `-o ControlPath` is set in ssh_args, the control path setting is not used.
ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s

# This defines the location of the ssh binary. It defaults to `ssh` which will use the first ssh binary available in $PATH.
# This option is usually not required, it might be useful when access to system ssh is restricted, or when using ssh wrappers to connect to remote hosts.
ssh_executable = ssh

# unused?
# transfer_method =

[tags]

# default list of tags to run in your plays, Skip Tags has precedence.
# run =

# default list of tags to skip in your plays, has precedence over Run Tags
# skip =
